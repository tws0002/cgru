cmake_minimum_required(VERSION 2.8.8)
project(afanasy)

set(CMAKE_BUILD_TYPE "Release")

set( CMAKE_CXX_OUTPUT_EXTENSION ".${CMAKE_HOST_SYSTEM_NAME}.o")

set(CMAKE_MODULE_PATH $ENV{ADD_CMAKE_MODULE_PATH} ${CMAKE_MODULE_PATH})

if( ( NOT $ENV{AF_PYTHON_INCLUDE_PATH} STREQUAL "") AND ( NOT $ENV{AF_PYTHON_LIBRARIES} STREQUAL "" ) )
	set(PYTHON_INCLUDE_PATH $ENV{AF_PYTHON_INCLUDE_PATH})
	set(PYTHON_LIBRARIES $ENV{AF_PYTHON_LIBRARIES})
	message("Using specified python = '${PYTHON_INCLUDE_PATH}'")
else( ( NOT $ENV{AF_PYTHON_INCLUDE_PATH} STREQUAL "") AND ( NOT $ENV{AF_PYTHON_LIBRARIES} STREQUAL "" ) )
	find_package(PythonLibs REQUIRED)
endif( ( NOT $ENV{AF_PYTHON_INCLUDE_PATH} STREQUAL "") AND ( NOT $ENV{AF_PYTHON_LIBRARIES} STREQUAL "" ) )

if( "$ENV{AF_POSTGRESQL}" STREQUAL "NO" )
	message("\nWARNING! Building without SQL.\n")
else()
	#set(PostgreSQL_ADDITIONAL_VERSIONS "9.2" "9.3" "9.4" "9.5")
	if( "$ENV{AF_POSTGRESQL}" STREQUAL "REQUIRED" )
		find_package(PostgreSQL REQUIRED)
	else()
		find_package(PostgreSQL)
	endif()
	if( PostgreSQL_FOUND )
		message("PostgreSQL found. Building with SQL.")
		add_definitions(-DSQL_ON)
	else()
		message("\nWARNING! No PostgreSQL found. Building without SQL.\n")
		add_definitions(-DSQL_OFF)
	endif()
endif()

if(UNIX)
	add_definitions(-DUNIX)
	if(APPLE)
		set(CMAKE_OSX_ARCHITECTURES "x86_64")
		#Changing the order of configurations to be sure release is the first one
		set(CMAKE_CONFIGURATION_TYPES "Release")
		add_definitions(-DMACOSX)
	else(APPLE)
		add_definitions(-DLINUX)
	endif(APPLE)
endif(UNIX)
if(WIN32)
	add_definitions(-DWINNT)
	set( REGEX_STD ON)
endif(WIN32)

if(CMAKE_COMPILER_IS_GNUCC)
	if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 5)
		message("Setting c++11 standard for GCC ${CMAKE_CXX_COMPILER_VERSION}")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
		set( REGEX_STD ON)
	endif()
endif()

if( REGEX_STD )
	add_definitions(-DREGEX_STD)
	message("Using std::regex ECMAScript regular expressions (Perl-like).")
else()
	message("Using POSIX-EXTENDED regular expressions.")
endif()

include_directories(${PYTHON_INCLUDE_PATH})

set( CMAKE_RUNTIME_OUTPUT_DIRECTORY "../../../$ENV{AF_OSTYPE}/bin")
set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY "../../../$ENV{AF_OSTYPE}/archives")
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set_property(GLOBAL PROPERTY AUTOGEN_TARGETS_FOLDER "_generated")

if(POLICY CMP0020)
	cmake_policy(SET CMP0020 OLD)
endif()

add_subdirectory(libafanasy)
add_subdirectory(render)
add_subdirectory(libafsql)
add_subdirectory(cmd)
add_subdirectory(server)
if( "$ENV{AF_GUI}" STREQUAL "YES" )
	add_subdirectory(libafqt)
	add_subdirectory(watch)
	if( "$ENV{AF_FERMER}" STREQUAL "YES" )
    	if( "$ENV{AF_QT_VER}" STREQUAL "5" )
    		find_package(Boost COMPONENTS filesystem system python)
    		if(Boost_FOUND)
    			include_directories(${Boost_INCLUDE_DIRS})
    			add_subdirectory(fermer)
    		endif()
    	endif()
    endif()
else()
	message("\nWARNING! Building without GUI.\n")
endif()
